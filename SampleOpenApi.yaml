# OpenAPI Specification (sample.yaml)
openapi: 3.0.0
info:
  title: Sample API
  version: 1.0.0
  contact: # Added contact information
    name: API Support
    email: support@example.com
servers:
  - url: https://example.com/api/v1
paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    email: # Still missing format to trigger validation
                      type: string
    post:
      summary: Create a new user
      description: Create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                age:
                  type: integer
                  minimum: 0
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid request payload
  /users/{userId}:
    get:
      summary: Get a specific user by ID
      description: Retrieve a user by their unique identifier.
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Information about the requested user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
        '404':
          description: User not found
    put:
      summary: Update an existing user
      description: Update the information of an existing user.
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user to update.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                age:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid request payload
        '404':
          description: User not found
    delete:
      summary: Delete a user
      description: Delete a user by their unique identifier.
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user to delete.
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully (no content)
        '404':
          description: User not found
  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all available products.
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: string
                    name:
                      type: string
                    price: # Missing type
                      description: The price of the product
  /orders:
    post:
      summary: Create a new order
      description: Create a new order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid order payload
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
  securitySchemes:
    bearerAuth: # Still incorrect casing
      type: http
      scheme: bearer
      bearerFormat: JWT
