name: Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4 # Use a recent version
        with:
          node-version: 'lts/*' # Use the latest LTS version of Node.js

      # Install Spectral CLI globally
      - name: Install Spectral CLI
        run: npm install -g @stoplight/spectral-cli

      # Install sarif-spectral CLI globally
      - name: Install sarif-spectral CLI
        run: npm install -g spectral-sarif

      - name: List Global npm Packages
        run: npm list -g --depth=0

      # Get npm global prefix
      - name: Get npm global prefix
        id: get-npm-prefix
        run: echo "PREFIX=$(npm config get prefix)" >> $GITHUB_OUTPUT

      # Add npm global bin to PATH
      - name: Add npm global bin to PATH
        run: echo "${{ steps.get-npm-prefix.outputs.PREFIX }}/bin" >> $GITHUB_PATH

      # Execute Spectral CLI
      - name: Run Spectral Linting
        run: spectral lint SampleOpenApi.yaml -r SpectralRules.yaml -f json -o out.json

      # Execute sarif-spectral CLI and output to SARIF file
      - name: Run sarif-spectral
        run: spectral-sarif -o reports/open-api.sarif out.json -r .

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Debug Envs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
        run: printenv
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=whitej031788_demo-java-security_23c25f38-ad3f-457c-8faf-5dcadd7de422 -Dsonar.projectName='Java Web App'